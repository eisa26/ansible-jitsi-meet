jibri {
  // A unique identifier for this Jibri
  // TODO: eventually this will be required with no default
  id = ""
  // Whether or not Jibri should return to idle state after handling
  // (successfully or unsuccessfully) a request.  A value of 'true'
  // here means that a Jibri will NOT return back to the IDLE state
  // and will need to be restarted in order to be used again.
  single-use-mode = false
  api {
    http {
      external-api-port = 2222
      internal-api-port = 3333
    }
    xmpp {
      // See example_xmpp_envs.conf for an example of what is expected here
      environments = [
        {
            // A user-friendly name for this environment
            name = "Jitsi"

            // A list of XMPP server hosts to which we'll connect
            xmpp-server-hosts = [
{% if inventory_hostname == groups['central'][0] %}
                "localhost"
{% else %}
                "{{ hostvars[groups['central'][0]]['ansible_default_ipv4']['address'] }}"
{% endif %}
	    ]

            // The base XMPP domain
            xmpp-domain = "{{ meet_domain }}"

            // An (optional) base url the Jibri will join if it is set
            // base-url = "https://meet.example.com"

            // The MUC we'll join to announce our presence for
            // recording and streaming services
            control-muc {
                domain = "internal.auth.{{ meet_domain }}"
                room-name = "jibribrewery"
                nickname = "{{ jibri_muc_nick }}"
            }

            // The login information for the control MUC
            control-login {
                domain = "auth.{{ meet_domain }}"
                // Optional port, defaults to 5222.
                port = 5222
                username = "{{ jibri_user }}"
                password = "{{ jibri_pass }}"
            }

            // An (optional) MUC configuration where we'll
            // join to announce SIP gateway services
//            sip-control-muc {
//                domain = "domain"
//                room-name = "room-name"
//                nickname = "nickname"
//            }

            // The login information the selenium web client will use
            call-login {
                domain = "recorder.{{ meet_domain }}"
                username = "{{ jibri_user }}"
                password = "{{ jibri_pass }}"
            }

            // The value we'll strip from the room JID domain to derive
            // the call URL
            strip-from-room-domain = "conference."

            // How long Jibri sessions will be allowed to last before
            // they are stopped.  A value of 0 allows them to go on
            // indefinitely
            usage-timeout = 0

            // Whether or not we'll automatically trust any cert on
            // this XMPP domain
            trust-all-xmpp-certs = true
        }
      ]
    }
  }
  recording {
    recordings-directory = "{{ recording_directory }}"
    # TODO: make this an optional param and remove the default
    finalize-script = "{{ recording_processing_script }}"
  }
  streaming {
    // A list of regex patterns for allowed RTMP URLs.  The RTMP URL used
    // when starting a stream must match at least one of the patterns in
    // this list.
    rtmp-allow-list = [
      // By default, all services are allowed
      ".*"
    ]
  }
  sip {
    // The routing rule for the outbound scenario in VoxImplant is based on this prefix
    outbound-prefix = "out_"
  }
  ffmpeg {
    resolution = "1920x1080"
    // The audio source that will be used to capture audio on Linux
    audio-source = "alsa"
    // The audio device that will be used to capture audio on Linux
    audio-device = "plug:bsnoop"
  }
  chrome {
    // The flags which will be passed to chromium when launching
    flags = [
      "--use-fake-ui-for-media-stream",
      "--start-maximized",
      "--kiosk",
      "--enabled",
      "--disable-infobars",
      "--autoplay-policy=no-user-gesture-required"
    ]
  }
  stats {
    enable-stats-d = true
  }
  webhook {
    // A list of subscribers interested in receiving webhook events
    subscribers = []
  }
  jwt-info {
    // The path to a .pem file which will be used to sign JWT tokens used in webhook
    // requests.  If not set, no JWT will be added to webhook requests.
    # signing-key-path = "/path/to/key.pem"

    // The kid to use as part of the JWT
    # kid = "key-id"

    // The issuer of the JWT
    # issuer = "issuer"

    // The audience of the JWT
    # audience = "audience"

    // The TTL of each generated JWT.  Can't be less than 10 minutes.
    # ttl = 1 hour
  }
  call-status-checks {
    // If all clients have their audio and video muted and if Jibri does not
    // detect any data stream (audio or video) comming in, it will stop
    // recording after NO_MEDIA_TIMEOUT expires.
    no-media-timeout = 30 seconds

    // If all clients have their audio and video muted, Jibri consideres this
    // as an empty call and stops the recording after ALL_MUTED_TIMEOUT expires.
    all-muted-timeout = 10 minutes

    // When detecting if a call is empty, Jibri takes into consideration for how
    // long the call has been empty already. If it has been empty for more than
    // DEFAULT_CALL_EMPTY_TIMEOUT, it will consider it empty and stop the recording.
    default-call-empty-timeout = 30 seconds
  }
}
